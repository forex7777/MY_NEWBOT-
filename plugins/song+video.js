const config = require('../config');
const { cmd } = require('../command');
const { ytsearch } = require('@dark-yasiya/yt-dl.js');

// MP4 video download
// MP4 video download with options
cmd({ 
    pattern: "mp4", 
    alias: ["video"], 
    react: "üé•", 
    desc: "Download YouTube video", 
    category: "main", 
    use: '.mp4 < Yt url or Name >', 
    filename: __filename 
}, async (conn, mek, m, { from, prefix, quoted, q, reply }) => { 
    try { 
        if (!q) return await reply("*·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä  è·¥è·¥ú·¥õ·¥ú ô Ä ·¥ú Ä ü ·¥è Ä s·¥è…¥…¢ …¥·¥Ä·¥ç·¥á.‚ùì*");
        
        const yt = await ytsearch(q);
        if (yt.results.length < 1) return reply("*…¥·¥è  Ä·¥ás·¥ú ü·¥õs “ì·¥è·¥ú…¥·¥Ö ‚ùóÔ∏è*");
        
        let yts = yt.results[0];  
        let apiUrl = `https://apis.davidcyriltech.my.id/download/ytmp4?url=${encodeURIComponent(yts.url)}`;
        
        let response = await fetch(apiUrl);
        let data = await response.json();
        
        if (data.status !== 200 || !data.success || !data.result.download_url) {
            return reply("Failed to fetch the video. Please try again later.");
        }

        let ytmsg = `‚îè‚îÅ*üé• lakshan MD ·¥†…™·¥Ö·¥á·¥è ·¥Ö ü*üåü‚îÅ‚îÅ‚îÅ
‚îÉ üéô *·¥õ…™·¥õ ü·¥á :* ${yts.title}
‚îÉ ‚åõÔ∏è *·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥ :* ${yts.timestamp}
‚îÉ üëÄ *·¥†…™·¥á·¥°s :* ${yts.views}
‚îÉ üë§ *·¥Ä·¥ú·¥õ ú·¥è Ä :* ${yts.author.name}
‚îÉ üñá * ü…™…¥·¥ã :* ${yts.url}
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

> *üî¢ ·¥Ñ ú·¥è·¥èÍú±·¥á ·¥Ä …¥·¥ú·¥ç ô·¥á Ä  ô·¥á ü·¥è·¥°.*

*[ 1Ô∏è‚É£ ] ·¥Ö·¥è·¥Ñ·¥ú·¥ç·¥á…¥·¥õ  “ì·¥è Ä·¥ç·¥Ä·¥õ*
*[ 2Ô∏è‚É£ ] …¥·¥è Ä·¥ç·¥Ä ü ·¥†…™·¥Ö·¥á·¥è “ì·¥è Ä·¥ç·¥Ä·¥õ*

* Ä·¥á·¥ò ü è ·¥°…™·¥õ ú 1,2 ·¥õ·¥è ·¥õ ú…™s ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥õ ú·¥á “ì·¥è Ä·¥ç·¥Ä·¥õ  è·¥è·¥ú ·¥ò Ä·¥á“ì·¥á Ä.*

> *lakshan  - ·¥ç·¥Ö Íú±…™·¥ç·¥ò ü·¥á ·¥° ú·¥Ä·¥õÍú±·¥Ä·¥ò·¥ò  ô·¥è·¥õ*`;

        let contextInfo = {
            mentionedJid: [m.sender],
            forwardingScore: 999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterJid: '120363420182617946@newsletter',
                newsletterName: '·¥Ö·¥Ä Ä·¥ã ·¥ã…™…¥…¢ - x ·¥ç·¥Ö',
                serverMessageId: 143
            }
        };

        // Send thumbnail with options
        const videoMsg = await conn.sendMessage(from, { image: { url: yts.thumbnail }, caption: ytmsg, contextInfo }, { quoted: mek });

        conn.ev.on("messages.upsert", async (msgUpdate) => {
            const replyMsg = msgUpdate.messages[0];
            if (!replyMsg.message || !replyMsg.message.extendedTextMessage) return;

            const selected = replyMsg.message.extendedTextMessage.text.trim();

            if (
                replyMsg.message.extendedTextMessage.contextInfo &&
                replyMsg.message.extendedTextMessage.contextInfo.stanzaId === videoMsg.key.id
            ) {
                await conn.sendMessage(from, { react: { text: "‚¨áÔ∏è", key: replyMsg.key } });

                switch (selected) {
                    case "1":
                        await conn.sendMessage(from, {
                            document: { url: data.result.download_url },
                            mimetype: "video/mp4",
                            fileName: `${yts.title}.mp4`,
                            contextInfo
                        }, { quoted: replyMsg });
                        break;

                    case "2":
                        await conn.sendMessage(from, {
                            video: { url: data.result.download_url },
                            mimetype: "video/mp4",
                            contextInfo
                        }, { quoted: replyMsg });
                        break;

                    default:
                        await conn.sendMessage(
                            from,
                            { text: "*·¥ò ü·¥á·¥Äs·¥á  Ä·¥á·¥ò ü è ·¥õ·¥è ( 1 , 2 ) ‚ù§Ô∏è*" },
                            { quoted: replyMsg }
                        );
                        break;
                }
            }
        });

    } catch (e) {
        console.log(e);
        reply("An error occurred. Please try again later.");
    }
});

// MP3 song download
cmd({ 
    pattern: "song", 
    react: "üé∂", 
    desc: "Download YouTube song", 
    category: "main", 
    use: '.song < Yt url or Name >', 
    filename: __filename 
}, async (conn, mek, m, { from, prefix, quoted, q, reply }) => { 
    try { 
        if (!q) return await reply("*·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä  è·¥è·¥ú·¥õ·¥ú ô Ä ·¥ú Ä ü ·¥è Ä s·¥è…¥…¢ …¥·¥Ä·¥ç·¥á.‚ùì*");
        
        const yt = await ytsearch(q);
        if (yt.results.length < 1) return reply("*…¥·¥è  Ä·¥ás·¥ú ü·¥õs “ì·¥è·¥ú…¥·¥Ö ‚ùóÔ∏è*");
        
        let yts = yt.results[0];  
        let apiUrl = `https://apis.davidcyriltech.my.id/youtube/mp3?url=${encodeURIComponent(yts.url)}`;
        
        let response = await fetch(apiUrl);
        let data = await response.json();
        
        if (data.status !== 200 || !data.success || !data.result.downloadUrl) {
            return reply("*·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö.·¥ò ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥  ü·¥Ä·¥õ·¥á Ä.üîÅ*");
        }
        
        let ytmsg = `‚îè‚îÅ*üéµ  ·¥Ö·¥Ä Ä·¥ã ·¥ã…™…¥…¢ s·¥è…¥…¢ ·¥Ö ü*üåü‚îÅ‚îÅ‚îÅ
‚îÉ üéô *·¥õ…™·¥õ ü·¥á :* ${yts.title}
‚îÉ ‚åõÔ∏è *·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥ :* ${yts.timestamp}
‚îÉ üëÄ *·¥†…™·¥á·¥°s :* ${yts.views}
‚îÉ üë§ *·¥Ä·¥ú·¥õ ú·¥è Ä :* ${yts.author.name}
‚îÉ üñá * ü…™…¥·¥ã :* ${yts.url}
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

> *üî¢ ·¥Ñ ú·¥è·¥èÍú±·¥á ·¥Ä …¥·¥ú·¥ç ô·¥á Ä  ô·¥á ü·¥è·¥°.*

*[ 1Ô∏è‚É£ ] ·¥ç·¥ò3 ·¥Äs ·¥Ö·¥è·¥Ñ·¥ú·¥ç·¥á…¥·¥õ*
*[ 2Ô∏è‚É£ ] ·¥ç·¥ò3 ·¥Äs ·¥Ä·¥ú·¥Ö…™·¥è ( ·¥ò ü·¥Ä è )*
*[ 3Ô∏è‚É£ ] ·¥ç·¥ò3 ·¥Äs ·¥†·¥è…™·¥Ñ·¥á …¥·¥è·¥õ·¥á ( ·¥ò·¥õ·¥õ )*

* Ä·¥á·¥ò ü è ·¥°…™·¥õ ú 1,2,3 ·¥õ·¥è ·¥õ ú…™s ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥õ ú·¥á “ì·¥è Ä·¥ç·¥Ä·¥õ  è·¥è·¥ú ·¥ò Ä·¥á“ì·¥á Ä.*

> *lakshan  - MD ·¥° ú·¥Ä·¥õÍú±·¥Ä·¥ò·¥ò  ô·¥è·¥õ*`;
        
        let contextInfo = {
            mentionedJid: [m.sender],
            forwardingScore: 999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterJid: '120363420182617946@newsletter',
                newsletterName: '·¥Ö·¥Ä Ä·¥ã ·¥ã…™…¥…¢ - x ·¥ç·¥Ö',
                serverMessageId: 143
            }
        };
        
        // Send thumbnail with caption only
  const songmsg = await conn.sendMessage(from, { image: { url: yts.thumbnail }, caption: ytmsg, contextInfo }, { quoted: mek });

  
     
                     conn.ev.on("messages.upsert", async (msgUpdate) => {
        

                const mp3msg = msgUpdate.messages[0];
                if (!mp3msg.message || !mp3msg.message.extendedTextMessage) return;

                const selectedOption = mp3msg.message.extendedTextMessage.text.trim();

                if (
                    mp3msg.message.extendedTextMessage.contextInfo &&
                    mp3msg.message.extendedTextMessage.contextInfo.stanzaId === songmsg.key.id
                ) {
                
                            
                   await conn.sendMessage(from, { react: { text: "‚¨áÔ∏è", key: mp3msg.key } });

                    switch (selectedOption) {
case "1":   

      
      
   await conn.sendMessage(from, { document: { url: data.result.downloadUrl }, mimetype: "audio/mpeg", fileName: `${yts.title}.mp3`, contextInfo }, { quoted: mp3msg });   
      
      
break;
case "2":   
await conn.sendMessage(from, { audio: { url: data.result.downloadUrl }, mimetype: "audio/mpeg", contextInfo }, { quoted: mp3msg });
break;
case "3":   
await conn.sendMessage(from, { audio: { url: data.result.downloadUrl }, mimetype: "audio/mpeg", ptt: true, contextInfo }, { quoted: mp3msg });
break;


default:
                            await conn.sendMessage(
                                from,
                                {
                                    text: "*…™…¥·¥†·¥Ä ü…™·¥Ö s·¥á ü·¥á·¥Ñ·¥õ…™·¥è…¥ ·¥ò ü·¥á·¥Äs·¥á s·¥á ü·¥á·¥Ñ·¥õ  ô·¥á·¥õ·¥°·¥á·¥á…¥.( 1 or 2 or 3) üî¥*",
                                },
                                { quoted: mp3msg }
                            );
             }}});
           
    } catch (e) {
        console.log(e);
        reply("*·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö.·¥ò ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥  ü·¥Ä·¥õ·¥á Ä.üîÅ*");
    }
});
