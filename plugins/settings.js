const config = require('../config')
const { cmd, commands } = require('../command')
const os = require("os")
const { updateEnv } = require("../lib/updateEnv") // Make sure this exists

cmd({
    pattern: "settings",
    alias: ["setting"],
    desc: "settings the bot",
    category: "owner",
    react: "‚öôÔ∏è",
    filename: __filename
},
async (conn, mek, m, { from, isOwner, quoted, reply }) => {
    if (!isOwner) return reply("‚ùå You are not the owner!");

    try {
        let desc = `‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
*‚îÇ ‚öôÔ∏è kavidu-  ·¥ç·¥Ö s·¥á·¥õ·¥õ…™…¥…¢ ·¥ò·¥Ä…¥·¥á ü*
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚îè‚îÅ*1Ô∏è‚É£  ·¥°·¥è Ä·¥ã_·¥ç·¥è·¥Ö·¥á üõÉ*‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
 *1.1  | ·¥ò·¥ú ô ü…™·¥Ñ ·¥è Ä …™…¥ ô·¥èx ·¥ç·¥è·¥Ö·¥á*
 *1.2 | ·¥ò Ä…™·¥†·¥Ä·¥õ·¥á ·¥ç·¥è·¥Ö·¥á*
 *1.3 |  …¢ Ä·¥è·¥ú·¥ò ·¥ç·¥è·¥Ö·¥á*
 *1.4 |  …™…¥ ô·¥èx ·¥ç·¥è·¥Ö·¥á*
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚îè‚îÅ *2Ô∏è‚É£ ·¥Ä·¥ú·¥õ·¥è_·¥†·¥è…™·¥Ñ·¥á üó£*  ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
 *2.1  | ·¥Ä·¥ú·¥õ·¥è ·¥†·¥è…™·¥Ñ·¥á ·¥á…¥·¥Ä ô ü·¥á*
 *2.2 | Auto Voice ·¥Ö…™s·¥Ä ô ü·¥á*
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚îè‚îÅ *3Ô∏è‚É£ ·¥Ä·¥ú·¥õ·¥è_ Ä·¥á·¥Ä·¥Ö_s·¥õ·¥Ä·¥õ·¥ús üñ≤* ‚îÅ‚îÅ
 *3.1 |  ·¥Ä·¥ú·¥õ·¥è  Ä·¥á·¥Ä·¥Ö s·¥õ·¥Ä·¥õ·¥ús ·¥á…¥·¥Ä ô ü·¥á*
 *3.2 | ·¥Ä·¥ú·¥õ·¥è  Ä·¥á·¥Ä·¥Ö s·¥õ·¥Ä·¥ús ·¥Ö…™s·¥Ä ô ü·¥á*
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚îè‚îÅ*4Ô∏è‚É£ ·¥Ä·¥ú·¥õ·¥è_s·¥õ…™·¥Ñ·¥ã·¥á Äüé≠*‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
 *4.1 | ·¥Ä·¥ú·¥õ·¥è s·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥á…¥·¥Ä ô ü·¥á*
 *4.2 | ·¥Ä·¥ú·¥õ·¥è s·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥Ö…™s·¥Ä ô ü·¥á*
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚îè‚îÅ*5Ô∏è‚É£ ·¥Ä·¥ú·¥õ·¥è_ Ä·¥á·¥ò ü è  üí¨*‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
 *5.1 | ·¥Ä·¥ú·¥õ·¥è  Ä·¥á·¥ò ü è ·¥á…¥·¥Ä ô ü·¥á*
 *5.2 | ·¥Ä·¥ú·¥õ·¥è  Ä·¥á·¥ò ü è ·¥Ö…™s·¥Ä ô ü·¥á*
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚îè‚îÅ*6Ô∏è‚É£  ô·¥è·¥õ ·¥è…¥ ü…™…¥·¥á ·¥è Ä ·¥è“ì“ì ü…™…¥·¥áüì±*‚îÅ
 *6.1 | ·¥è…¥ ü…™…¥·¥á ·¥á…¥·¥Ä ô ü·¥á*
 *6.2 | ·¥è“ì“ì ü…™…¥·¥á ·¥Ö…™s·¥Ä ô ü·¥á*
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚îè‚îÅ *7Ô∏è‚É£  Ä·¥á·¥Ä·¥Ö_·¥ç·¥áss·¥Ä…¢·¥á ‚ùáÔ∏è* ‚îÅ‚îÅ‚îÅ‚îÅ
 *7.1 |  Ä·¥á·¥Ä·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á ·¥á…¥·¥Ä ô ü·¥á*
 *7.2 |  Ä·¥á·¥Ä·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á ·¥Ö…™s·¥Ä ô ü·¥á*
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚îè‚îÅ*8Ô∏è‚É£ ·¥Ä·¥ú·¥õ·¥è_ Ä·¥á·¥Ä·¥Ñ·¥õ ·¥á·¥ç·¥è·¥ä…™ üéâ* ‚îÅ‚îÅ‚îÅ
 *8.1 | ·¥Ä·¥ú·¥õ·¥è  Ä·¥á·¥Ä·¥Ñ·¥õ ·¥á·¥ç·¥è·¥ä…™ ·¥á…¥·¥Ä ô ü·¥á*
 *8.2 | ·¥Ä·¥ú·¥õ·¥è  Ä·¥á·¥Ä·¥Ñ·¥õ ·¥á·¥ç·¥è·¥ä…™ ·¥Ö…™s·¥Ä ô ü·¥á*
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚îè‚îÅ*9Ô∏è‚É£ ·¥Ä…¥·¥õ…™_ ü…™…¥·¥ã üöØ*‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
 *9.1 | ·¥Ä…¥·¥õ…™  ü…™…¥·¥ã ·¥á…¥·¥Ä ô ü·¥á*
 *9.2 | ·¥Ä…¥·¥õ…™  ü…™…¥·¥ã ·¥Ö…™s·¥Ä ô ü·¥á*
 *9.3 | ·¥Ä…¥·¥õ…™  ü…™…¥·¥ã  Ä·¥á·¥ç·¥è·¥†·¥á*
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

> *üî¢  Ä·¥á·¥ò ü è  ô·¥á ü·¥è·¥° ·¥õ ú…™s …¥·¥ú·¥ç ô·¥á Ä ·¥Ñ ú·¥Ä…¥…¢·¥á ·¥õ·¥è  ô·¥è·¥õ s·¥á·¥õ·¥õ…™…¥…¢*

> *kavidu-  ·¥ç·¥Ö Íú±…™·¥ç·¥ò ü·¥á ·¥° ú·¥Ä·¥õÍú±·¥Ä·¥ò·¥ò  ô·¥è·¥õ*`;

        const vv = await conn.sendMessage(from, {
            image: { url: "https://i.ibb.co/bjyS3nXz/5608.jpg" },
            caption: desc
        }, { quoted: mek });

        conn.ev.on('messages.upsert', async (msgUpdate) => {
            const msg = msgUpdate.messages[0];
            if (!msg.message || !msg.message.extendedTextMessage) return;

            const selectedOption = msg.message.extendedTextMessage.text.trim();

            if (msg.message.extendedTextMessage.contextInfo && msg.message.extendedTextMessage.contextInfo.stanzaId === vv.key.id) {

                try {
                    switch (selectedOption) {
                        case '1.1':
                            {
                                let success = await updateEnv('MODE', 'public');
                                if (success) reply("‚úÖ Mode set to Public");
                                else reply("‚ùå Failed to set mode to Public");
                            }
                            break;

                        case '1.2':
                            {
                                let success = await updateEnv('MODE', 'private');
                                if (success) reply("‚úÖ Mode set to Private");
                                else reply("‚ùå Failed to set mode to Private");
                            }
                            break;

                        case '1.3':
                            {
                                let success = await updateEnv('MODE', 'group');
                                if (success) reply("‚úÖ Mode set to Group");
                                else reply("‚ùå Failed to set mode to Group");
                            }
                            break;

                        case '1.4':
                            {
                                let success = await updateEnv('MODE', 'inbox');
                                if (success) reply("‚úÖ Mode set to Inbox");
                                else reply("‚ùå Failed to set mode to Inbox");
                            }
                            break;

                        case '2.1':
                            {
                                let success = await updateEnv('AUTO_VOICE', 'true');
                                if (success) reply("‚úÖ Auto Voice Enabled");
                                else reply("‚ùå Failed to enable Auto Voice");
                            }
                            break;

                        case '2.2':
                            {
                                let success = await updateEnv('AUTO_VOICE', 'false');
                                if (success) reply("‚úÖ Auto Voice Disabled");
                                else reply("‚ùå Failed to disable Auto Voice");
                            }
                            break;

                        case '3.1':
                            {
                                let success = await updateEnv('AUTO_READ_STATUS', 'true');
                                if (success) reply("‚úÖ Auto Read Status Enabled");
                                else reply("‚ùå Failed to enable Auto Read Status");
                            }
                            break;

                        case '3.2':
                            {
                                let success = await updateEnv('AUTO_READ_STATUS', 'false');
                                if (success) reply("‚úÖ Auto Read Status Disabled");
                                else reply("‚ùå Failed to disable Auto Read Status");
                            }
                            break;

                        case '4.1':
                            {
                                let success = await updateEnv('AUTO_STICKER', 'true');
                                if (success) reply("‚úÖ Auto Sticker Enabled");
                                else reply("‚ùå Failed to enable Auto Sticker");
                            }
                            break;

                        case '4.2':
                            {
                                let success = await updateEnv('AUTO_STICKER', 'false');
                                if (success) reply("‚úÖ Auto Sticker Disabled");
                                else reply("‚ùå Failed to disable Auto Sticker");
                            }
                            break;

                        case '5.1':
                            {
                                let success = await updateEnv('AUTO_REPLY', 'true');
                                if (success) reply("‚úÖ Auto Reply Enabled");
                                else reply("‚ùå Failed to enable Auto Reply");
                            }
                            break;

                        case '5.2':
                            {
                                let success = await updateEnv('AUTO_REPLY', 'false');
                                if (success) reply("‚úÖ Auto Reply Disabled");
                                else reply("‚ùå Failed to disable Auto Reply");
                            }
                            break;

                        case '6.1':
                            {
                                let success = await updateEnv('ALLWAYS_OFFLINE', 'false');
                                if (success) reply("‚úÖ Bot is now Online");
                                else reply("‚ùå Failed to set Bot Online");
                            }
                            break;

                        case '6.2':
                            {
                                let success = await updateEnv('ALLWAYS_OFFLINE', 'true');
                                if (success) reply("‚úÖ Bot is now Offline");
                                else reply("‚ùå Failed to set Bot Offline");
                            }
                            break;

                        case '7.1':
                            {
                                let success = await updateEnv('READ_MESSAGE', 'true');
                                if (success) reply("‚úÖ Read Message Enabled");
                                else reply("‚ùå Failed to enable Read Message");
                            }
                            break;

                        case '7.2':
                            {
                                let success = await updateEnv('READ_MESSAGE', 'false');
                                if (success) reply("‚úÖ Read Message Disabled");
                                else reply("‚ùå Failed to disable Read Message");
                            }
                            break;

                        case '8.1':
                            {
                                let success = await updateEnv('AUTO_REACT', 'true');
                                if (success) reply("‚úÖ Auto React Enabled");
                                else reply("‚ùå Failed to enable Auto React");
                            }
                            break;

                        case '8.2':
                            {
                                let success = await updateEnv('AUTO_REACT', 'false');
                                if (success) reply("‚úÖ Auto React Disabled");
                                else reply("‚ùå Failed to disable Auto React");
                            }
                            break;

                        case '9.1':
                            {
                                let success1 = await updateEnv('ANTI_LINK', 'true');
                                let success2 = await updateEnv('ANTI_LINKK', 'false');
                                if (success1 && success2) reply("‚úÖ Anti Link Enabled (Strict)");
                                else reply("‚ùå Failed to enable Anti Link Strict Mode");
                            }
                            break;

                        case '9.2':
                            {
                                let success1 = await updateEnv('ANTI_LINKK', 'true');
                                let success2 = await updateEnv('ANTI_LINK', 'false');
                                if (success1 && success2) reply("‚úÖ Anti Link Soft Mode Enabled");
                                else reply("‚ùå Failed to enable Anti Link Soft Mode");
                            }
                            break;

                        case '9.3':
                            {
                                let success1 = await updateEnv('ANTI_LINK', 'false');
                                let success2 = await updateEnv('ANTI_LINKK', 'false');
                                if (success1 && success2) reply("‚úÖ Anti Link Disabled");
                                else reply("‚ùå Failed to disable Anti Link");
                            }
                            break;

                        default:
                            reply("‚ùå Invalid Option. Please select a valid option.");
                    }

                } catch (err) {
                    console.error(err);
                    reply("‚ö†Ô∏è Error while updating setting.");
                }

            }
        });

    } catch (e) {
        console.error(e);
        await conn.sendMessage(from, { react: { text: '‚ùå', key: mek.key } })
        reply('‚ö†Ô∏è An error occurred while processing your request.');
    }
});
